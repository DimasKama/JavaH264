name: build

on:
  release:
    types:
      - created
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:

  build-linux-x86-64:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cargo build
        run: |
          cargo build --release --lib
      - uses: actions/upload-artifact@v4
        with:
          name: javah264-linux-x86-64
          path: ./rust/target/release/libjavah264.so

  build-linux-x86:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./rust
    env:
      CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER: i686-linux-gnu-gcc
      CC: i686-linux-gnu-gcc
      CXX: i686-linux-gnu-g++
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: i686-unknown-linux-gnu

      - name: Install i686 cross-compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-i686-linux-gnu g++-i686-linux-gnu
      - name: Set i686 Cross-Compilation Env
        env:
          CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER: i686-linux-gnu-gcc
          CC: i686-linux-gnu-gcc
          CXX: i686-linux-gnu-g++
        run: echo "Environment variables for i686 set."

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target i686-unknown-linux-gnu

      - uses: actions/upload-artifact@v4
        with:
          name: javah264-linux-x86
          path: ./rust/target/i686-unknown-linux-gnu/release/libjavah264.so

  build-linux-aarch64:
    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ./rust
    env:
      CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
      CC: aarch64-linux-gnu-gcc
      CXX: aarch64-linux-gnu-g++
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install aarch64 cross-compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: aarch64-unknown-linux-gnu
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build
        run: cargo build --release --target aarch64-unknown-linux-gnu
      - uses: actions/upload-artifact@v4
        with:
          name: javah264-linux-aarch64
          path: ./rust/target/aarch64-unknown-linux-gnu/release/libjavah264.so

  build-macos-x86-64:
    runs-on: macos-13
    defaults:
      run:
        working-directory: ./rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download and extract MacOS SDK
        run: |
          mkdir -p sdk
          cd sdk
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX10.14.sdk.tar.xz
          tar -xJf MacOSX10.14.sdk.tar.xz
      - name: Cargo build
        run: |
          SDKROOT=$(pwd)/sdk/MacOSX10.14.sdk/ MACOSX_DEPLOYMENT_TARGET=10.14 cargo build --release --lib
      - uses: actions/upload-artifact@v4
        with:
          name: javah264-macos-x86-64
          path: ./rust/target/release/libjavah264.dylib

  build-macos-aarch64:
    runs-on: macos-13
    defaults:
      run:
        working-directory: ./rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download and extract MacOS SDK
        run: |
          mkdir -p sdk
          cd sdk
          wget https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.0.sdk.tar.xz
          tar -xJf MacOSX11.0.sdk.tar.xz
      - name: Cargo build
        run: |
          cargo install cargo-xbuild
          rustup target add aarch64-apple-darwin
          SDKROOT=$(pwd)/sdk/MacOSX11.0.sdk/ MACOSX_DEPLOYMENT_TARGET=11.0 cargo build --target=aarch64-apple-darwin --release --lib
      - uses: actions/upload-artifact@v4
        with:
          name: javah264-macos-aarch64
          path: ./rust/target/aarch64-apple-darwin/release/libjavah264.dylib

  build-windows-x86-64:
    runs-on: windows-2025
    defaults:
      run:
        working-directory: ./rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cargo build
        run: |
          cargo build --release --lib
      - uses: actions/upload-artifact@v4
        with:
          name: javah264-windows-x86-64
          path: ./rust/target/release/javah264.dll

  build-windows-x86:
    runs-on: windows-2025
    defaults:
      run:
        working-directory: ./rust
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Cargo build
        run: |
          cargo install cargo-xbuild
          rustup target add i686-pc-windows-msvc
          cargo build --target=i686-pc-windows-msvc --release --lib
      - uses: actions/upload-artifact@v4
        with:
          name: javah264-windows-x86
          path: ./rust/target/i686-pc-windows-msvc/release/javah264.dll

  build-java-library:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [build-linux-x86-64, build-linux-x86, build-linux-aarch64, build-macos-x86-64, build-macos-aarch64, build-windows-x86-64, build-windows-x86]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
      - name: Download linux-x86-64
        uses: actions/download-artifact@v4
        with:
          name: javah264-linux-x86-64
          path: ./src/main/resources/natives/linux-x64/
      - name: Download linux-x86
        uses: actions/download-artifact@v4
        with:
          name: javah264-linux-x86
          path: ./src/main/resources/natives/linux-x86/
      - name: Download linux-aarch64
        uses: actions/download-artifact@v4
        with:
          name: javah264-linux-aarch64
          path: ./src/main/resources/natives/linux-aarch64/
      - name: Download macos-x86-64
        uses: actions/download-artifact@v4
        with:
          name: javah264-macos-x86-64
          path: ./src/main/resources/natives/mac-x64/
      - name: Download macos-aarch64
        uses: actions/download-artifact@v4
        with:
          name: javah264-macos-aarch64
          path: ./src/main/resources/natives/mac-aarch64/
      - name: Download windows-x86-64
        uses: actions/download-artifact@v4
        with:
          name: javah264-windows-x86-64
          path: ./src/main/resources/natives/windows-x64/
      - name: Download windows-x86
        uses: actions/download-artifact@v4
        with:
          name: javah264-windows-x86
          path: ./src/main/resources/natives/windows-x86/

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Publish to Maven
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
        run: ./gradlew publish

      - name: Find all JAR files
        id: find_all_jars
        run: |
          JAR_PATHS=$(find build/libs -name "*.jar" | xargs)
          if [ -z "$JAR_PATHS" ]; then
          echo "Error: No JAR files found in build/libs."
          exit 1
          fi
          echo "jar_paths=$JAR_PATHS" >> $GITHUB_OUTPUT

      - name: Upload all JARs to Release Assets
        if: success() && steps.find_all_jars.outputs.jar_paths != ''
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.find_all_jars.outputs.jar_paths }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}